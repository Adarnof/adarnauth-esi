# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-10 15:12
from __future__ import unicode_literals

from django.db import migrations

SCOPES = {
    'manage_planets': "Allows reading a list of a character's planetary colonies, and the details of those colonies.",
    'open_window': "Allows open window in game client remotely.",
    'read_assets': "Allows reading a list of assets that the character owns.",
    'read_calendar_events': "Allows reading a character's calendar, including corporate events.",
    'read_character_bookmarks': "Allows reading of a character's bookmarks and bookmark folders.",
    'read_character_wallet': "Allows reading of a character's wallet, journal and transaction history.",
    'read_clones': "Allows reading the locations of a character's jump clones and their implants.",
    'read_contacts': "Allows reading of a character's contacts list, and calculation of CSPA charges.",
    'read_corporation_membership':
        "Allows reading a list of the ID's and roles of a character's fellow corporation members.",
    'read_fleet': "Allows reading information about fleets.",
    'read_killmails': "Allows reading of a character's kills and losses.",
    'read_location': "Allows reading of a character's active ship location.",
    'read_ship_type': "Allows reading of a character's active ship class.",
    'read_skillqueue': "Allows reading of a character's currently training skill queue.",
    'read_skills': "Allows reading of a character's currently known skills.",
    'read_structures': 'Allows querying the location and type of structures that the character has docking access at.',
    'respond_calendar_events': "Allows updating of a character's calendar event responses.",
    'search_structures': "Allows searching over all structures that a character can see in the structure browser.",
    'write_fleet': "Allows manipulating fleets.",
    'write_waypoint': "Allows manipulating waypoints in game client remotely."
}


def generate_scopes(apps, schema_editor):
    Scope = apps.get_model('esi', 'Scope')
    for s in SCOPES:
        Scope.objects.update_or_create(name=s, defaults={'help_text': SCOPES[s]})


def delete_scopes(apps, schema_editor):
    Scope = apps.get_model('esi', 'Scope')
    for s in SCOPES:
        try:
            Scope.objects.get(name=s).delete()
        except Scope.DoesNotExist:
            pass


class Migration(migrations.Migration):
    dependencies = [
        ('esi', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(generate_scopes, delete_scopes)
    ]
